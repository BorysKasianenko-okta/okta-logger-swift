default_platform(:ios)

module Constants
  TRY_ATTEMPTS = 2
  DEFAULT_DEVICE = "test-iphone"
  SDK = "iphonesimulator"
end

module Utils
  # Common test completion handler
  def self.test_run_block
    lambda do |testrun_info|
      failed_test_count = testrun_info[:failed].size

      if failed_test_count > 0
        UI.important('The run of tests would finish with failures due to fragile tests here.')
        try_attempt = testrun_info[:try_count]
        if try_attempt < Constants::TRY_ATTEMPTS
          UI.header('Since we are using :multi_scan, we can re-run just those failing tests!')
        end
      end
    end
  end

  # Routines after all tests are finished
  def self.post_tests_routines(test_result)
    unless test_result[:failed_testcount].zero?
      UI.message("There are #{test_result[:failed_testcount]} legitimate failing tests")
    end

    reports = Dir['../fastlane/test_output/**/*.xml'].map { |relpath| File.absolute_path(relpath) }
    UI.message("collate_junit_reports with #{reports}")
    collate_junit_reports(
        reports: reports,
        collated_report: './fastlane/test_output/test-result.xml'
    )
  end

end


platform :ios do
  desc "Description of what the lane does"
  before_all do |lane, options|
    cocoapods
  end

  lane :lint do |options|
    Dir.mkdir '../fastlane/lint' unless Dir.exist? '../fastlane/lint'
    reporter = "junit" unless options[:action] == 'autocorrect'
    swiftlint(
        mode: options[:action] || :lint,
        executable: "Pods/SwiftLint/swiftlint",
        output_file: "fastlane/lint/swiftlint.result.xml",
        reporter: reporter
    )
  end

  lane :test do |options|
    result = multi_scan(
        scheme: options[:scheme] || 'OktaLogger',
        try_count: options[:tryCount] || Constants::TRY_ATTEMPTS,
        output_types: 'junit',
        output_files: 'test-result.xml',
        fail_build: true,
        quit_simulators: true,
        clean: true,
        result_bundle: true,
        testrun_completed_block: Utils.test_run_block,
        sdk: Constants::SDK,
        device: options[:device] || Constants::DEFAULT_DEVICE

    )
  end

end
